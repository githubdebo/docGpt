{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\deboroy\\\\source\\\\repos\\\\docGpt\\\\client\\\\src\\\\components\\\\PageContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Title from './Title';\nimport TwoColumnLayout from './TwoColumnLayout';\nimport PageHeader from './PageHeader';\nimport ButtonContainer from './ButtonContainer';\nimport Button from './Button';\nimport ResultWithSources from './ResultWithSources';\nimport PromptBox from './PromptBox';\n//import handleApiRequest from '../api/api'\nimport \"../global.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const PageContent = () => {\n  _s();\n  const [prompt, setPrompt] = useState(\"\");\n  const [messages, setMessages] = useState([{\n    text: \"Hi, What would you like to know?\",\n    type: \"bot\"\n  }]);\n  const [error, setError] = useState(\"\");\n  const [selectedFile, setSelectedFile] = useState(null);\n\n  // This function updates the prompt value when the user types in the prompt box\n  const handlePromptChange = e => {\n    setPrompt(e.target.value);\n  };\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    setSelectedFile(file);\n  };\n\n  // This function handles the submission of the form when the user hits 'Enter' or 'Submit'\n  // It sends a GET request to the provided endpoint with the current prompt as the query\n  const handleUpload = async endpoint => {\n    if (selectedFile) {\n      const formData = new FormData();\n      formData.append('file', selectedFile);\n      try {\n        console.log(`sending ${prompt}`);\n        console.log(`using ${endpoint}`);\n\n        // // A POST request is sent to the backend\n        const response = await fetch(`/api/${endpoint}`, {\n          method: \"POST\",\n          body: formData\n        });\n      } catch (error) {\n        console.log(error);\n        setError(error.message);\n      }\n    }\n  };\n\n  // This function handles the submission of the user's prompt when the user hits 'Enter' or 'Submit'\n  // It sends a POST request to the provided endpoint with the current prompt in the request body\n  const handleSubmitPrompt = async endpoint => {\n    try {\n      setPrompt(\"\");\n\n      // Push the user's message into the messages array\n      setMessages(prevMessages => [...prevMessages, {\n        text: prompt,\n        type: \"user\",\n        sourceDocuments: null\n      }]);\n\n      // A POST request is sent to the backend with the current prompt in the request body\n      const response = await fetch(`/api/${endpoint}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          input: prompt\n        })\n      });\n\n      // Throw an error if the HTTP status is not OK\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      // Parse the response from the backend as JSON\n      const searchRes = await response.json();\n      console.log({\n        searchRes\n      });\n\n      // Push the response into the messages array\n      setMessages(prevMessages => [...prevMessages, {\n        text: searchRes.result.text,\n        type: \"bot\",\n        sourceDocuments: searchRes.result.sourceDocuments\n      }]);\n      setError(\"\"); // Clear any existing error messages\n    } catch (error) {\n      console.log(error);\n      setError(error.message);\n    }\n  };\n\n  // The component returns a two column layout with various child components\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(TwoColumnLayout, {\n      leftChildren: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(PageHeader, {\n          heading: \"Talk To Doc\"\n          //boldText=\"How to get rich? How to be happy?\"\n          ,\n          description: \"This tool will\\r let you ask anything contained in a document.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ButtonContainer, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            onChange: handleFileChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            handleSubmit: handleUpload,\n            endpoint: \"pdf-upload\",\n            buttonText: \"Upload Document \\uD83D\\uDCDA\",\n            className: \"Button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true),\n      rightChildren: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(ResultWithSources, {\n          messages: messages,\n          pngFile: \"pdf\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(PromptBox, {\n          prompt: prompt,\n          handlePromptChange: handlePromptChange,\n          handleSubmit: () => handleSubmitPrompt(\"/pdf-query\")\n          // handleSubmit={() => handleSubmitQuery(\"/pdfquery-agent\")}\n          ,\n          placeHolderText: \"Please enter your question...\",\n          error: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(PageContent, \"ROvAf9RXL3XmDFH5iUjBLx85XlU=\");\n_c = PageContent;\nvar _c;\n$RefreshReg$(_c, \"PageContent\");","map":{"version":3,"names":["React","useState","Title","TwoColumnLayout","PageHeader","ButtonContainer","Button","ResultWithSources","PromptBox","jsxDEV","_jsxDEV","Fragment","_Fragment","PageContent","_s","prompt","setPrompt","messages","setMessages","text","type","error","setError","selectedFile","setSelectedFile","handlePromptChange","e","target","value","handleFileChange","event","file","files","handleUpload","endpoint","formData","FormData","append","console","log","response","fetch","method","body","message","handleSubmitPrompt","prevMessages","sourceDocuments","headers","JSON","stringify","input","ok","Error","status","searchRes","json","result","children","leftChildren","heading","description","fileName","_jsxFileName","lineNumber","columnNumber","onChange","handleSubmit","buttonText","className","rightChildren","pngFile","placeHolderText","_c","$RefreshReg$"],"sources":["C:/Users/deboroy/source/repos/docGpt/client/src/components/PageContent.js"],"sourcesContent":["import React,{useState} from 'react'\r\nimport Title from './Title'\r\nimport TwoColumnLayout from './TwoColumnLayout'\r\nimport PageHeader from './PageHeader'\r\nimport ButtonContainer from './ButtonContainer'\r\nimport Button from './Button'\r\nimport ResultWithSources from './ResultWithSources'\r\nimport PromptBox from './PromptBox'\r\n//import handleApiRequest from '../api/api'\r\nimport \"../global.css\"\r\n\r\nexport const PageContent = () => {\r\n  const [prompt, setPrompt] = useState(\"\");\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      text: \"Hi, What would you like to know?\",\r\n      type: \"bot\",\r\n    },\r\n  ]);\r\n  const [error, setError] = useState(\"\");\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n\r\n  // This function updates the prompt value when the user types in the prompt box\r\n  const handlePromptChange = (e) => {\r\n    setPrompt(e.target.value);\r\n  };\r\n\r\n  const handleFileChange = (event) => {\r\n    const file = event.target.files[0];\r\n    setSelectedFile(file);\r\n  };\r\n\r\n  // This function handles the submission of the form when the user hits 'Enter' or 'Submit'\r\n  // It sends a GET request to the provided endpoint with the current prompt as the query\r\n  const handleUpload = async (endpoint) => {\r\n    if(selectedFile){\r\n      const formData = new FormData();\r\n      formData.append('file', selectedFile);\r\n      try {\r\n        console.log(`sending ${prompt}`);\r\n        console.log(`using ${endpoint}`);\r\n  \r\n        // // A POST request is sent to the backend\r\n        const response = await fetch(`/api/${endpoint}`, {\r\n          method: \"POST\",\r\n          body: formData,\r\n        });\r\n  \r\n  \r\n      } catch (error) {\r\n        console.log(error);\r\n        setError(error.message);\r\n      }\r\n    }\r\n  };\r\n\r\n  // This function handles the submission of the user's prompt when the user hits 'Enter' or 'Submit'\r\n  // It sends a POST request to the provided endpoint with the current prompt in the request body\r\n  const handleSubmitPrompt = async (endpoint) => {\r\n    try {\r\n      setPrompt(\"\");\r\n\r\n      // Push the user's message into the messages array\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { text: prompt, type: \"user\", sourceDocuments: null },\r\n      ]);\r\n\r\n      // A POST request is sent to the backend with the current prompt in the request body\r\n      const response = await fetch(`/api/${endpoint}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ input: prompt }),\r\n      });\r\n\r\n      // Throw an error if the HTTP status is not OK\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      // Parse the response from the backend as JSON\r\n      const searchRes = await response.json();\r\n\r\n      console.log({ searchRes });\r\n\r\n      // Push the response into the messages array\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        {\r\n          text: searchRes.result.text,\r\n          type: \"bot\",\r\n          sourceDocuments: searchRes.result.sourceDocuments,\r\n        },\r\n      ]);\r\n\r\n      setError(\"\"); // Clear any existing error messages\r\n    } catch (error) {\r\n      console.log(error);\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  // The component returns a two column layout with various child components\r\n  return (\r\n    <div>\r\n      <TwoColumnLayout\r\n        leftChildren={\r\n          <>\r\n            <PageHeader\r\n              heading=\"Talk To Doc\"\r\n              //boldText=\"How to get rich? How to be happy?\"\r\n              description=\"This tool will\r\n            let you ask anything contained in a document.\"\r\n            />\r\n            <ButtonContainer>\r\n              <input type=\"file\" onChange={handleFileChange} />\r\n              <Button\r\n                handleSubmit={handleUpload}\r\n                endpoint=\"pdf-upload\"\r\n                buttonText=\"Upload Document 📚\"\r\n                className=\"Button\"\r\n              />\r\n            </ButtonContainer>\r\n          </>\r\n        }\r\n        rightChildren={\r\n          <>\r\n            <ResultWithSources messages={messages} pngFile=\"pdf\" />\r\n            <PromptBox\r\n              prompt={prompt}\r\n              handlePromptChange={handlePromptChange}\r\n              handleSubmit={() => handleSubmitPrompt(\"/pdf-query\")}\r\n              // handleSubmit={() => handleSubmitQuery(\"/pdfquery-agent\")}\r\n              placeHolderText={\"Please enter your question...\"}\r\n              error={error}\r\n            />\r\n          </>\r\n        }\r\n      />\r\n    </div>\r\n  )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}