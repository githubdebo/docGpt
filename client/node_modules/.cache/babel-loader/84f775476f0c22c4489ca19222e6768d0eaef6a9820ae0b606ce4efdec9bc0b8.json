{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\deboroy\\\\source\\\\repos\\\\docGpt\\\\client\\\\src\\\\components\\\\PageContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Title from './Title';\nimport TwoColumnLayout from './TwoColumnLayout';\nimport PageHeader from './PageHeader';\nimport ButtonContainer from './ButtonContainer';\nimport Button from './Button';\nimport ResultWithSources from './ResultWithSources';\nimport PromptBox from './PromptBox';\n//import handleApiRequest from '../api/api'\nimport \"../global.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const PageContent = () => {\n  _s();\n  const [prompt, setPrompt] = useState(\"\");\n  const [messages, setMessages] = useState([{\n    text: \"Hi, What would you like to know?\",\n    type: \"bot\"\n  }]);\n  const [error, setError] = useState(\"\");\n\n  // This function updates the prompt value when the user types in the prompt box\n  const handlePromptChange = e => {\n    setPrompt(e.target.value);\n  };\n\n  // This function handles the submission of the form when the user hits 'Enter' or 'Submit'\n  // It sends a GET request to the provided endpoint with the current prompt as the query\n  const handleSubmit = async endpoint => {\n    try {\n      console.log(`sending ${prompt}`);\n      console.log(`using ${endpoint}`);\n\n      // // A GET request is sent to the backend\n      const response = await fetch(`/api/${endpoint}`, {\n        method: \"GET\"\n      });\n\n      // // The response from the backend is parsed as JSON\n      // const searchRes = await response.json();\n      // console.log(searchRes);\n      // setError(\"\"); // Clear any existing error messages\n      // let searchResponse;\n      // handleApiRequest(endpoint, \"GET\")\n      // .then((responseData) => {\n      //   searchResponse = responseData;\n      // })\n    } catch (error) {\n      console.log(error);\n      setError(error.message);\n    }\n  };\n\n  // This function handles the submission of the user's prompt when the user hits 'Enter' or 'Submit'\n  // It sends a POST request to the provided endpoint with the current prompt in the request body\n  const handleSubmitPrompt = async endpoint => {\n    try {\n      setPrompt(\"\");\n\n      // Push the user's message into the messages array\n      setMessages(prevMessages => [...prevMessages, {\n        text: prompt,\n        type: \"user\",\n        sourceDocuments: null\n      }]);\n\n      // A POST request is sent to the backend with the current prompt in the request body\n      const response = await fetch(`/api/${endpoint}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          input: prompt\n        })\n      });\n\n      // Throw an error if the HTTP status is not OK\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      // Parse the response from the backend as JSON\n      const searchRes = await response.json();\n      console.log({\n        searchRes\n      });\n\n      // Push the response into the messages array\n      setMessages(prevMessages => [...prevMessages, {\n        text: searchRes.result.text,\n        type: \"bot\",\n        sourceDocuments: searchRes.result.sourceDocuments\n      }]);\n      setError(\"\"); // Clear any existing error messages\n    } catch (error) {\n      console.log(error);\n      setError(error.message);\n    }\n  };\n\n  // The component returns a two column layout with various child components\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(TwoColumnLayout, {\n      leftChildren: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(PageHeader, {\n          heading: \"Talk To Doc\"\n          //boldText=\"How to get rich? How to be happy?\"\n          ,\n          description: \"This tool will\\r let you ask anything contained in a document.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ButtonContainer, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            handleSubmit: handleSubmit,\n            endpoint: \"pdf-upload\",\n            buttonText: \"Upload Document \\uD83D\\uDCDA\",\n            className: \"Button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true),\n      rightChildren: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(ResultWithSources, {\n          messages: messages,\n          pngFile: \"pdf\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(PromptBox, {\n          prompt: prompt,\n          handlePromptChange: handlePromptChange,\n          handleSubmit: () => handleSubmitPrompt(\"/pdf-query\")\n          // handleSubmit={() => handleSubmitQuery(\"/pdfquery-agent\")}\n          ,\n          placeHolderText: \"Please enter your question...\",\n          error: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(PageContent, \"i2FnR4OG1ooxJf61JXk3o/CV7nA=\");\n_c = PageContent;\nvar _c;\n$RefreshReg$(_c, \"PageContent\");","map":{"version":3,"names":["React","useState","Title","TwoColumnLayout","PageHeader","ButtonContainer","Button","ResultWithSources","PromptBox","jsxDEV","_jsxDEV","Fragment","_Fragment","PageContent","_s","prompt","setPrompt","messages","setMessages","text","type","error","setError","handlePromptChange","e","target","value","handleSubmit","endpoint","console","log","response","fetch","method","message","handleSubmitPrompt","prevMessages","sourceDocuments","headers","body","JSON","stringify","input","ok","Error","status","searchRes","json","result","children","leftChildren","heading","description","fileName","_jsxFileName","lineNumber","columnNumber","buttonText","className","rightChildren","pngFile","placeHolderText","_c","$RefreshReg$"],"sources":["C:/Users/deboroy/source/repos/docGpt/client/src/components/PageContent.js"],"sourcesContent":["import React,{useState} from 'react'\r\nimport Title from './Title'\r\nimport TwoColumnLayout from './TwoColumnLayout'\r\nimport PageHeader from './PageHeader'\r\nimport ButtonContainer from './ButtonContainer'\r\nimport Button from './Button'\r\nimport ResultWithSources from './ResultWithSources'\r\nimport PromptBox from './PromptBox'\r\n//import handleApiRequest from '../api/api'\r\nimport \"../global.css\"\r\n\r\nexport const PageContent = () => {\r\n    const [prompt, setPrompt] = useState(\"\");\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      text: \"Hi, What would you like to know?\",\r\n      type: \"bot\",\r\n    },\r\n  ]);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  // This function updates the prompt value when the user types in the prompt box\r\n  const handlePromptChange = (e) => {\r\n    setPrompt(e.target.value);\r\n  };\r\n\r\n  // This function handles the submission of the form when the user hits 'Enter' or 'Submit'\r\n  // It sends a GET request to the provided endpoint with the current prompt as the query\r\n  const handleSubmit = async (endpoint) => {\r\n    try {\r\n      console.log(`sending ${prompt}`);\r\n      console.log(`using ${endpoint}`);\r\n\r\n      // // A GET request is sent to the backend\r\n      const response = await fetch(`/api/${endpoint}`, {\r\n        method: \"GET\",\r\n      });\r\n\r\n      // // The response from the backend is parsed as JSON\r\n      // const searchRes = await response.json();\r\n      // console.log(searchRes);\r\n      // setError(\"\"); // Clear any existing error messages\r\n      // let searchResponse;\r\n      // handleApiRequest(endpoint, \"GET\")\r\n      // .then((responseData) => {\r\n      //   searchResponse = responseData;\r\n      // })\r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  // This function handles the submission of the user's prompt when the user hits 'Enter' or 'Submit'\r\n  // It sends a POST request to the provided endpoint with the current prompt in the request body\r\n  const handleSubmitPrompt = async (endpoint) => {\r\n    try {\r\n      setPrompt(\"\");\r\n\r\n      // Push the user's message into the messages array\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { text: prompt, type: \"user\", sourceDocuments: null },\r\n      ]);\r\n\r\n      // A POST request is sent to the backend with the current prompt in the request body\r\n      const response = await fetch(`/api/${endpoint}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ input: prompt }),\r\n      });\r\n\r\n      // Throw an error if the HTTP status is not OK\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      // Parse the response from the backend as JSON\r\n      const searchRes = await response.json();\r\n\r\n      console.log({ searchRes });\r\n\r\n      // Push the response into the messages array\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        {\r\n          text: searchRes.result.text,\r\n          type: \"bot\",\r\n          sourceDocuments: searchRes.result.sourceDocuments,\r\n        },\r\n      ]);\r\n\r\n      setError(\"\"); // Clear any existing error messages\r\n    } catch (error) {\r\n      console.log(error);\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  // The component returns a two column layout with various child components\r\n  return (\r\n    <div>\r\n      <TwoColumnLayout\r\n        leftChildren={\r\n          <>\r\n            <PageHeader\r\n              heading=\"Talk To Doc\"\r\n              //boldText=\"How to get rich? How to be happy?\"\r\n              description=\"This tool will\r\n            let you ask anything contained in a document.\"\r\n            />\r\n            <ButtonContainer>\r\n              {/* <Button\r\n                handleSubmit={()=>{handleSubmit('pdfupload-book')}}\r\n                endpoint=\"pdfuploadtest\"\r\n                buttonText=\"Upload Test Data ☁️\"\r\n                className=\"Button\"\r\n              /> */}\r\n              <Button\r\n                handleSubmit={handleSubmit}\r\n                endpoint=\"pdf-upload\"\r\n                buttonText=\"Upload Document 📚\"\r\n                className=\"Button\"\r\n              />\r\n            </ButtonContainer>\r\n          </>\r\n        }\r\n        rightChildren={\r\n          <>\r\n            <ResultWithSources messages={messages} pngFile=\"pdf\" />\r\n            <PromptBox\r\n              prompt={prompt}\r\n              handlePromptChange={handlePromptChange}\r\n              handleSubmit={() => handleSubmitPrompt(\"/pdf-query\")}\r\n              // handleSubmit={() => handleSubmitQuery(\"/pdfquery-agent\")}\r\n              placeHolderText={\"Please enter your question...\"}\r\n              error={error}\r\n            />\r\n          </>\r\n        }\r\n      />\r\n    </div>\r\n  )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}